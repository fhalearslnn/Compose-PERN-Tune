pipeline{
    agent any

    environment {
            DOCKERHUB_USER="fhalearslan"
            APP_REPO_NAME = "haley-todo-app"  
            NETWORK="haleynetwork"
            VOLUME="haleyvolume"
            POSTGRES_PASSWORD="Pp123456789"
    }

        stage("Build Docker Images"){
            steps{
                echo 'Building Docker images'
                script {

                sh 'docker build --force-rm -t "$DOCKERHUB_USER/$APP_REPO_NAME:postgre" -f ./database/Dockerfile .'
                sh 'docker build --force-rm -t "$DOCKERHUB_USER/$APP_REPO_NAME:nodejs" -f ./server/Dockerfile .'
                sh 'docker build --force-rm -t "$DOCKERHUB_USER/$APP_REPO_NAME:react" -f ./client/Dockerfile .'
                sh 'docker image ls'
            }
        }
        stage('Push Image to Dockerhub Repo') {
            steps {
                echo 'Pushing App Image to Dockerhub Repo'
                sh 'docker login -u "$DOCKERHUB_USER" -p dckr_pat_pjBe0LfjreBlXAdsQmACJseY_T8'
                sh 'docker push "$DOCKERHUB_USER/$APP_REPO_NAME:postgre"'
                sh 'docker push "$DOCKERHUB_USER/$APP_REPO_NAME:nodejs"'
                sh 'docker push "$DOCKERHUB_USER/$APP_REPO_NAME:react"'
            }
        }

        stage('Create Volume') {
            steps {
                echo 'echo Creating the volume for the App'
                sh 'docker volume create "$VOLUME'
            }

        stage('Create Network') {
            steps {
                echo 'echo Creating the network for the App'
                sh 'docker network create "$NETWORK'
            }
        }
        stage('Deploy the App'){
            echo 'Deploy the DB'
            sh 'docker run --name db -p 5432:5432 -v $VOLUME:/var/lib/postgresql/data --network $NETWORK -e  POSTGRES_PASSWORD=$POSTGRES_PASSWORD --restart always -d $DOCKERHUB_USER/$APP_REPO_NAME:postgre'

        }
        stage('Wait the container'){
            step {
                script {
                    echo 'Waiting for the container '
                    sh ' sleep 60s'
                }
        }
        stage('Deploy the server') {
            steps {
                echo 'Deploying the server'
                sh 'docker run --name server -p 5000:5000 --network $NETWORK --restart always -d $DOCKERHUB_USER/$APP_REPO_NAME:nodejs' 
            }
        }
        stage('wait the Nodejs-container') {
            steps {
                script {
                    echo 'Waiting for the Nodejs'
                    sh 'sleep  30s' // wait for  30 seconds
                }
            }
        }
        stage('Deploy the client') {
            steps {
                echo 'Deploying the client'
                sh 'docker run --name client -p 3000:3000 --network $NETWORK  --restart always -d $DOCKERHUB_USER/$APP_REPO_NAME:react' 
            }
        }
        stage('Destroy the infrastructure') {
            steps{
                timeout(time:5, unit:'DAYS') {
                    input message: 'approve terminate'
                }
                echo "Terminating..."
                sh 'docker rm -f $(docker ps -aq)'
                sh 'docker network rm $NETWORK'
                sh 'docker volume rm $DB_VOLUME'
                sh 'docker rmi -f $DOCKERHUB_USER/$APP_REPO_NAME:postgre $DOCKERHUB_USER/$APP_REPO_NAME:nodejs $DOCKERHUB_USER/$APP_REPO_NAME:react'
            }
        }
    }

} 
pipeline{
    agent any

    environment {
            DOCKERHUB_USER="fhalearslan"
            APP_REPO_NAME = "haley-todo"  
            NETWORK="haleynetwork"
            VOLUME="haleyvolume"

    }
    stages{
        stage("Build Docker Images"){
            steps {
                echo 'Building App Image'                
                sh 'docker build --force-rm -t "$DOCKERHUB_USER/$APP_REPO_NAME:postgre" -f ./database/Dockerfile .'
                sh 'docker build --force-rm -t "$DOCKERHUB_USER/$APP_REPO_NAME:nodejs" -f ./server/Dockerfile .'
                sh 'docker build --force-rm -t "$DOCKERHUB_USER/$APP_REPO_NAME:react" -f ./client/Dockerfile .'
                sh 'docker image ls'
            }
        }
        
        stage('Push Image to Dockerhub Repo') {
            steps {
                withCredentials([string(credentialsId: 'dockerhub', variable: 'DOCKER_TOKEN')]){
                    echo 'Pushing App Image to Dockerhub Repo'
                    sh 'docker login -u fhalearslan -p $DOCKER_TOKEN'
                    sh 'docker push "$DOCKERHUB_USER/$APP_REPO_NAME:postgre"'
                    sh 'docker push "$DOCKERHUB_USER/$APP_REPO_NAME:nodejs"'
                    sh 'docker push "$DOCKERHUB_USER/$APP_REPO_NAME:react"'
                }
            }
        }

        stage('Create Volume') {
            steps {
                echo 'echo Creating the volume for the App'
                sh 'docker volume create "$VOLUME"'
            }
        }
        stage('Create Network') {
            steps {
                echo 'echo Creating the network for the App'
                sh 'docker network create "$NETWORK"'
            }
        }
        stage('Deploy the DB'){
          steps{
            echo 'Deploy the DB'
            withCredentials([string(credentialsId: 'db-password', variable: 'DB_PASSWORD')]) {
               sh 'docker run --name db -p 5432:5432 -v $VOLUME:/var/lib/postgresql/data --network $NETWORK -e  POSTGRES_PASSWORD=$POSTGRES_PASSWORD --restart always -d $DOCKERHUB_USER/$APP_REPO_NAME:postgre'
            }   
          }
        }
        stage('Wait the container'){
            steps {
                script {
                    echo 'Waiting for the container '
                    sh ' sleep 60s'
                }
            }
        }
        stage('Deploy the server') {
            steps {
                echo 'Deploying the server'
                sh 'docker run --name server -p 5000:5000 --network $NETWORK --restart always -d $DOCKERHUB_USER/$APP_REPO_NAME:nodejs' 
            }
        }
        stage('wait the Nodejs-container') {
            steps {
                script {
                    echo 'Waiting for the Nodejs'
                    sh 'sleep  30s' // wait for  30 seconds
                }
            }
        }
        stage('Deploy the client') {
            steps {
                echo 'Deploying the client'
                sh 'docker run --name client -p 3000:3000 --network $NETWORK  --restart always -d $DOCKERHUB_USER/$APP_REPO_NAME:react' 
            }
        }
        stage('Destroy the infrastructure') {
            steps{
                timeout(time:5, unit:'DAYS') {
                    input message: 'approve terminate'
                }

            }
        }
    }
    post {
        always {
            echo 'Clean'
            script {
                sh 'docker rm -f $(docker container ls -aq)'
                sh 'docker rmi -f $(docker images -q)'
                sh 'docker network rm $NETWORK'
                sh 'docker volume rm $DB_VOLUME'
            }
        }

        success {
            echo 'Pipeline executed successfully'
            sh 'echo  "successful" '
        }

        failure {
            echo 'Pipeline failed. '
             sh 'echo  "fail!!" '
        }
    }


} 